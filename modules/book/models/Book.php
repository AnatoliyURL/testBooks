<?php

namespace app\modules\book\models;

use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string $title
 * @property string $date_released
 * @property string|null $description
 * @property string|null $isbn
 * @property string|null $cover
 * @property int|null $is_deleted
 * @property string $file
 *
 * @property BookAuthors[] $bookAuthors
 * @property BookSubscription[] $bookSubscriptions
 * @property CatalogBooks[] $catalogBooks
 * @property CatalogBooksHistory[] $catalogBooksHistories
 * @property string $urlCover
 * @property array $authors
 * @property string $fullUrlCover
 */
class Book extends \yii\db\ActiveRecord
{

    public $file;
    public $authors;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'book';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'date_released'], 'required'],
            [['date_released'], 'safe'],
            [['description'], 'string'],
            [['is_deleted'], 'integer'],
            [['title', 'cover'], 'string', 'max' => 255],
            [['isbn'], 'string', 'max' => 13],
            [['file'], 'file', 'extensions' => 'png, jpg'],
            [['authors'], 'each', 'rule' => ['integer']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'date_released' => 'Дата издания',
            'description' => 'Описание',
            'isbn' => 'isbn',
            'cover' => 'Cover',
            'authors' => 'Авторы',
            'file' => 'Обложка',
        ];
    }

    /**
     * Gets query for [[BookAuthors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBookAuthors()
    {
        return $this->hasMany(BookAuthors::class, ['book_id' => 'id']);
    }

    /**
     * Gets query for [[BookSubscriptions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBookSubscriptions()
    {
        return $this->hasMany(BookSubscription::class, ['book_id' => 'id']);
    }

    /**
     * Gets query for [[CatalogBooks]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCatalogBooks()
    {
        return $this->hasMany(CatalogBooks::class, ['book_id' => 'id']);
    }

    /**
     * Gets query for [[CatalogBooksHistories]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCatalogBooksHistories()
    {
        return $this->hasMany(CatalogBooksHistory::class, ['book_id' => 'id']);
    }

    public function getUrlCover(): string
    {
        return '/book_cover/' . $this->cover;
    }

    public function getFullUrlCover(): string
    {
        if ($this->cover) {
            return Yii::$app->basePath . "/web/book_cover/" . $this->cover;
        }

        return false;
    }

    public function upload(){
        $this->file = UploadedFile::getInstance($this, 'file');
        if (!empty($this->file)) {
            if ($this->file->saveAs(Yii::$app->basePath . "/web/book_cover/{$this->file->baseName}.{$this->file->extension}")) {
                $this->deleteCurrentFile();
            }
            $this->cover = "{$this->file->baseName}.{$this->file->extension}";
        }
    }

    public function deleteCurrentFile()
    {
        if (file_exists($this->fullUrlCover)) {
            unlink($this->fullUrlCover);
        }
    }

    public function beforeSave($insert)
    {
        $this->upload();
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->authors) {
            if (!$this->isNewRecord) {
                BookAuthors::deleteAll(['book_id' => $this->id]);
            }

            foreach ($this->authors as $author) {
                $dependence = new BookAuthors();
                $dependence->book_id = $this->id;
                $dependence->author_id = $author;
                $dependence->save();
            }
        } else {
            BookAuthors::deleteAll(['book_id' => $this->id]);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
